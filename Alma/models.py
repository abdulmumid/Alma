from django.db import models
from ckeditor_uploader.fields import RichTextUploadingField
from django.utils.text import slugify
from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.conf import settings
from django.contrib.gis.db import models as geomodels
import qrcode
from io import BytesIO
from django.core.files import File

# üßë‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserManager(BaseUserManager):
    def create_user(self, phone, password=None, **extra_fields):
        if not phone:
            raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        user = self.model(phone=phone, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, phone, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        return self.create_user(phone, password, **extra_fields)

# üë§ –ö–∞—Å—Ç–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User(AbstractBaseUser, PermissionsMixin):
    first_name = models.CharField("–ò–º—è", max_length=100)
    last_name = models.CharField("–§–∞–º–∏–ª–∏—è", max_length=100)
    phone = models.CharField("–¢–µ–ª–µ—Ñ–æ–Ω", max_length=20, unique=True)
    is_phone_verified = models.BooleanField("–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω", default=False)
    code = models.CharField("–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", max_length=6, blank=True)
    qr_code = models.ImageField(upload_to='qr_codes/', blank=True, null=True)
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–µ–Ω", default=True)
    is_staff = models.BooleanField("–°–æ—Ç—Ä—É–¥–Ω–∏–∫", default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    USERNAME_FIELD = 'phone'
    REQUIRED_FIELDS = []

    objects = UserManager()

    def generate_qr_code(self):
        qr_data = f"User:{self.pk}, Phone:{self.phone}"
        qr_image = qrcode.make(qr_data)
        buffer = BytesIO()
        qr_image.save(buffer, format="PNG")
        file_name = f"user_{self.pk}_qr.png"
        self.qr_code.save(file_name, File(buffer), save=False)

    def save(self, *args, **kwargs):
        if not self.qr_code:
            self.generate_qr_code()
        super().save(*args, **kwargs)

    def __str__(self):
        return self.phone

    class Meta:
        verbose_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        verbose_name_plural = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"

class Board(models.Model):
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=255)
    slug = models.SlugField("URL (slug)", unique=True, blank=True)
    description = RichTextUploadingField("–û–ø–∏—Å–∞–Ω–∏–µ")
    image = models.ImageField("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", upload_to='boards/')
    created_at = models.DateTimeField("–°–æ–∑–¥–∞–Ω–æ", auto_now_add=True)
    updated_at = models.DateTimeField("–û–±–Ω–æ–≤–ª–µ–Ω–æ", auto_now=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = "–î–æ—Å–∫–∞"
        verbose_name_plural = "–î–æ—Å–∫–∏"

class Product(models.Model):
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=255)
    price = models.DecimalField("–¶–µ–Ω–∞", max_digits=8, decimal_places=2)
    discount = models.DecimalField("–°–∫–∏–¥–∫–∞", max_digits=5, decimal_places=2, null=True, blank=True)
    image = models.ImageField("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", upload_to='products/')
    barcode = models.CharField("–®—Ç—Ä–∏—Ö–∫–æ–¥", max_length=100, unique=True)
    label = models.CharField("–ù–∞—á–∏—Å–ª–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã", max_length=50, blank=True)
    is_featured = models.BooleanField("–ò–∑–±—Ä–∞–Ω–Ω—ã–π", default=False)
    store = models.ForeignKey('Store', on_delete=models.CASCADE, null=True, blank=True, verbose_name="–ú–∞–≥–∞–∑–∏–Ω")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.name} ({self.barcode})"

    class Meta:
        verbose_name = "–ü—Ä–æ–¥—É–∫—Ç"
        verbose_name_plural = "–ü—Ä–æ–¥—É–∫—Ç—ã"

class Stock(models.Model):
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=255)
    image = models.ImageField("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", upload_to='stock/')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = "–ê–∫—Ü–∏—è"
        verbose_name_plural = "–ê–∫—Ü–∏–∏"

class Story(models.Model):
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=100)
    icon = models.ImageField("–ò–∫–æ–Ω–∫–∞", upload_to='stories/')
    is_active = models.BooleanField("–ê–∫—Ç–∏–≤–Ω—ã–π", default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.title

    class Meta:
        verbose_name = "–°—Ç–æ—Ä–∏—Å"
        verbose_name_plural = "–°—Ç–æ—Ä–∏—Å—ã"

class CartItem(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    product = models.ForeignKey(Product, on_delete=models.CASCADE, verbose_name="–ü—Ä–æ–¥—É–∫—Ç")
    quantity = models.PositiveIntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", default=1)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.product} √ó{self.quantity}"

    class Meta:
        verbose_name = "–≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã"
        verbose_name_plural = "–ö–æ—Ä–∑–∏–Ω–∞"

class UserBonus(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    bonuses = models.PositiveIntegerField("–ë–æ–Ω—É—Å—ã", default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.user} ‚Äî {self.bonuses} –±–æ–Ω—É—Å–æ–≤"

    class Meta:
        verbose_name = "–ë–æ–Ω—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        verbose_name_plural = "–ë–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

class Store(models.Model):
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞", max_length=255)
    location = geomodels.PointField("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–ú–∞–≥–∞–∑–∏–Ω"
        verbose_name_plural = "–ú–∞–≥–∞–∑–∏–Ω—ã"