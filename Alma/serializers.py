from rest_framework import serializers
from django.contrib.auth import authenticate
from rest_framework_simplejwt.tokens import RefreshToken
from .models import *
import phonenumbers


# üìà –î–æ—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π / –∞–∫—Ü–∏–π
class BoardSerializer(serializers.ModelSerializer):
    class Meta:
        model = Board
        fields = ['id', 'title', 'slug', 'description', 'image', 'created_at', 'updated_at']


# üßæ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class RegisterSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['first_name', 'last_name', 'phone', 'password']
        extra_kwargs = {'password': {'write_only': True}}

    def validate_phone(self, value):
        value = value.replace(" ", "").replace("-", "").replace("(", "").replace(")", "")
        try:
            phone_obj = phonenumbers.parse(value, "KG")
            if not phonenumbers.is_valid_number(phone_obj):
                raise serializers.ValidationError("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            return phonenumbers.format_number(phone_obj, phonenumbers.PhoneNumberFormat.E164)
        except phonenumbers.NumberParseException:
            raise serializers.ValidationError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")

    def create(self, validated_data):
        user = User.objects.create_user(**validated_data)
        user.generate_qr_code()
        user.save()
        return user


# üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
class LoginSerializer(serializers.Serializer):
    phone = serializers.CharField()
    password = serializers.CharField(write_only=True)

    def validate(self, attrs):
        phone = attrs.get("phone")
        password = attrs.get("password")
        user = authenticate(phone=phone, password=password)
        if not user:
            raise serializers.ValidationError("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        if not user.is_active:
            raise serializers.ValidationError("–ê–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á—ë–Ω")

        refresh = RefreshToken.for_user(user)
        return {
            "refresh": str(refresh),
            "access": str(refresh.access_token),
        }


# üõí –ü—Ä–æ–¥—É–∫—Ç
class ProductSerializer(serializers.ModelSerializer):
    class Meta:
        model = Product
        fields = '__all__'


# üç≠ –ü—Ä–æ–¥—É–∫—Ç (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π)
class SimpleProductSerializer(serializers.ModelSerializer):
    class Meta:
        model = Product
        fields = ['id', 'name', 'price']


# üéØ –ê–∫—Ü–∏–∏
class StockSerializer(serializers.ModelSerializer):
    class Meta:
        model = Stock
        fields = '__all__'


# üì¢ –°—Ç–æ—Ä–∏—Å—ã
class StorySerializer(serializers.ModelSerializer):
    class Meta:
        model = Story
        fields = '__all__'


# üõí –≠–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã
class CartItemSerializer(serializers.ModelSerializer):
    product = SimpleProductSerializer(read_only=True)

    class Meta:
        model = CartItem
        fields = ['id', 'product', 'quantity']


# üí∞ –ë–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserBonusSerializer(serializers.ModelSerializer):
    user_phone = serializers.CharField(source='user.phone', read_only=True)

    class Meta:
        model = UserBonus
        fields = ['id', 'user', 'user_phone', 'bonuses']


# üìç –ú–∞–≥–∞–∑–∏–Ω
class StoreSerializer(serializers.ModelSerializer):
    class Meta:
        model = Store
        fields = ['id', 'name', 'location']
