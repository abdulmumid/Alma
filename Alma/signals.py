import telegram
import os
from dotenv import load_dotenv
import qrcode
from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import User
from io import BytesIO
from django.core.files import File
import logging

load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

logger = logging.getLogger(__name__)

def send_telegram_code(code, phone):
    if not BOT_TOKEN or not CHAT_ID:
        logger.error("TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return
    try:
        msg = f"üì± –ù–æ–º–µ—Ä: {phone}\nüîê –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {code}"
        bot = telegram.Bot(token=BOT_TOKEN)
        bot.send_message(chat_id=CHAT_ID, text=msg)
        logger.info("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram-–∫–æ–¥–∞: {e}")


@receiver(post_save, sender=User)
def generate_qr_code(sender, instance, created, **kwargs):
    if created and not instance.qr_code:
        qr_data = f"User: {instance.user.phone}"  # –∏–ª–∏ –¥—Ä—É–≥–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        qr = qrcode.make(qr_data)
        buffer = BytesIO()
        qr.save(buffer, format='PNG')
        buffer.seek(0)
        filename = f'{instance.user.phone}_qr.png'
